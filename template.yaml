AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Rekognify
  SAM Template for Rekognify

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  ProcessQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-process-queue"
    Metadata:
      SamResourceId: ProcessQueue

  ProcessQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource: !GetAtt ProcessQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ImageBucket.Arn

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-bucket"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-process-queue"

  DBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-table"
      AttributeDefinitions:
        - AttributeName: "filename"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "filename"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  S3SignedUrlHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-s3-signed-url-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
      Environment:
        Variables:
          S3_BUCKET: !Ref ImageBucket
          S3_PREFIX: "images"
          DYNAMODB_TABLE_NAME: !Ref DBTable
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./s3-signed-url-handler
      Dockerfile: Dockerfile

  ImageUploadHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-image-upload-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        SQS:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessQueue.Arn
            BatchSize: 5
            Enabled: true
      Environment:
        Variables:
          S3_BUCKET: !Ref ImageBucket
          DYNAMODB_TABLE_NAME: !Ref DBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DBTable
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
        - Statement:
            Sid: Rekognify
            Effect: Allow
            Action:
              - rekognition:DetectLabels
            Resource: "*"
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./image-upload-handler
      Dockerfile: Dockerfile
  ImageInfoHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-image-info-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /info/{filename}
            Method: GET
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DBTable
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./image-info-handler
      Dockerfile: Dockerfile

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  RekognifyAPI:
    Description: API Gateway endpoint URL for Prod environment for First Function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rekognify/"

  ImageUploadHandler:
    Description: Image Upload Handler Lambda Function ARN
    Value: !GetAtt ImageUploadHandler.Arn
