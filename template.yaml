AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Rekognify
  SAM Template for Rekognify

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate to use for the custom domain.
    Default: arn:aws:acm:us-east-1:626635403708:certificate/4d0e5c7c-8d5e-4f3b-a50e-4d679c857bda
  ZoneId:
    Type: String
    Description: The Route 53 hosted zone ID for the custom domain.
    Default: Z060955721PJNEZQKW8RA

Resources:
  ProcessQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-process-queue"
    Metadata:
      SamResourceId: ProcessQueue

  ProcessQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action: "sqs:SendMessage"
            Resource: !GetAtt ProcessQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ImageBucket.Arn

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-cloudfront-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ImageBucket.DomainName
            Id: S3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Sub "${CloudFrontOriginAccessControl.Id}"
            OriginPath: "/images"
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
        HttpVersion: http2
        Aliases:
          - !Sub "cdn.${AWS::StackName}.com"
        PriceClass: PriceClass_100
        Comment: !Sub "CloudFront distribution for ${ImageBucket}"

  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-bucket"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: "s3:ObjectCreated:*"
            Queue: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-process-queue"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${ImageBucket}/images/*"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  DBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-table"
      AttributeDefinitions:
        - AttributeName: "filename"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "filename"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  APIGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${AWS::StackName}.com"
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "*"
        
  APIGatewayApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIGatewayDomainName
      RestApiId: !Ref RestApiGateway
      Stage: Prod

  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref ZoneId
      RecordSets:
        - Name: !Sub "api.${AWS::StackName}.com"
          Type: A
          AliasTarget:
            DNSName: !GetAtt APIGatewayDomainName.DistributionDomainName
            HostedZoneId: !GetAtt APIGatewayDomainName.DistributionHostedZoneId
        - Name: !Sub "cdn.${AWS::StackName}.com"
          Type: A
          AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2

  S3SignedUrlHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-s3-signed-url-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
            RestApiId: !Ref RestApiGateway
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ImageBucket
          S3_BUCKET_PREFIX: "images"
          DYNAMODB_TABLE_NAME: !Ref DBTable
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBWritePolicy:
            TableName: !Ref DBTable
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./backend/s3-signed-url-handler
      Dockerfile: Dockerfile

  ImageUploadHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-image-upload-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        SQS:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessQueue.Arn
            BatchSize: 5
            Enabled: true
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ImageBucket
          S3_BUCKET_PREFIX: "images"
          DYNAMODB_TABLE_NAME: !Ref DBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DBTable
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
        - Statement:
            Sid: Rekognify
            Effect: Allow
            Action:
              - rekognition:DetectLabels
            Resource: "*"
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./backend/image-upload-handler
      Dockerfile: Dockerfile

  ImageInfoHandler:
    Type: AWS::Serverless::Function
    FunctionName: !Sub "${AWS::StackName}-image-info-handler"
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /info/{filename}
            Method: GET
            RestApiId: !Ref RestApiGateway
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DBTable
          CDN_DOMAIN: !Sub "cdn.${AWS::StackName}.com"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DBTable
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
    Metadata:
      DockerTag: provided.al2.v1
      DockerContext: ./backend/image-info-handler
      Dockerfile: Dockerfile

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  RekognifyAPI:
    Description: API Gateway endpoint URL
    Value: !Sub "https://api.${AWS::StackName}.com"

  RekognifyCDN:
    Description: CloudFront Distribution URL
    Value: !Sub "https://cdn.${AWS::StackName}.com"
